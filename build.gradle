buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
  id "com.gradle.build-scan" version "1.0"
  id 'java'
  id 'scala'
  id 'idea'
  id 'application'
  id 'maven'
  id 'jacoco'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://repository.cloudera.com/artifactory/cloudera-repos/" // kudu
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

mainClassName = "org.broadinstitute.hail.driver.Main"

String scalaVersion = '2.10.4'
String scalaMajorVersion = '2.10'
String sparkVersion = System.getProperty("hail.sparkversion","1.6.0-cdh5.7.2")
// String scalaVersion = '2.11.7'
// String scalaMajorVersion = '2.11'

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []

compileJava {
    options.compilerArgs << "-Xlint:all" << "-Werror"
}

compileScala {
    // scalaCompileOptions.compilerArgs << "-Xfatal-warnings"
    scalaCompileOptions.additionalParameters = ["-feature", "-Xfatal-warnings"]
    // scalaCompileOptions.forkOptions.jvmArgs = ['-XX:MaxPermSize=512m']
}

dependencies {
    compile 'org.scala-lang:scala-library:' + scalaVersion
    compile 'org.scala-lang:scala-reflect:' + scalaVersion
    compile('org.apache.spark:spark-core_' + scalaMajorVersion + ':' + sparkVersion) {
        exclude module: 'hadoop-client'
    }
    compile('org.apache.hadoop:hadoop-client:2.6.0-mr1-cdh5.7.1') {
        exclude module: 'servlet-api'
    }
    compile 'org.apache.spark:spark-sql_' + scalaMajorVersion + ':' + sparkVersion
    compile 'org.apache.spark:spark-mllib_' + scalaMajorVersion + ':' + sparkVersion
    compile 'net.jpountz.lz4:lz4:1.3.0'
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.scalanlp:breeze_' + scalaMajorVersion + ':0.11.2'
    // compile 'org.scalanlp:breeze_' + scalaMajorVersion + ':0.12'
    compile 'org.scalanlp:breeze-natives_' + scalaMajorVersion + ':0.11.2'
    compile 'args4j:args4j:2.32'
    compile 'com.github.samtools:htsjdk:2.5.0'
    compile 'org.kududb:kudu-client:0.9.0'
    compile 'org.kududb:kudu-spark_2.10:0.9.0'

    compile 'org.http4s:http4s-core_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-server_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-argonaut_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-dsl_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-scala-xml_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-client_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-websocket_' + scalaMajorVersion + ':0.1.3'
    compile 'org.http4s:http4s-blaze-core_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-blaze-client_' + scalaMajorVersion + ':0.12.3'
    compile 'org.http4s:http4s-blaze-server_' + scalaMajorVersion + ':0.12.3'
    compile 'org.json4s:json4s-core_2.10:3.2.10'
    // compile 'org.json4s:json4s-native_2.10:3.2.10'
    compile 'org.json4s:json4s-jackson_2.10:3.2.10'
    compile 'org.json4s:json4s-ast_2.10:3.2.10'
    //compile 'org.json4s:json4s-native_' + scalaMajorVersion + ':3.3.0'
    //compile 'org.json4s:json4s-jackson_' + scalaMajorVersion + ':3.3.0'
    //compile 'org.json4s:json4s-ast_' + scalaMajorVersion + ':3.3.0'

    compile 'org.apache.solr:solr-solrj:6.0.1'
    compile 'com.datastax.cassandra:cassandra-driver-core:3.0.0'

    compile 'com.jayway.restassured:rest-assured:2.8.0'

    testCompile 'org.testng:testng:6.8.21'
    testCompile 'org.scalatest:scalatest_' + scalaMajorVersion + ':2.2.4'
}

task(checkSettings) << {
    def checkSeed = System.getProperty("check.seed", "1")
    if (checkSeed == "random")
        checkSeed = new Random().nextInt().toString()
    def checkSize = System.getProperty("check.size", "1000")
    def checkCount = System.getProperty("check.count", "10")

    println "check: seed = $checkSeed, size = $checkSize, count = $checkCount"

    // override with these defaults, random seed
    System.setProperty("check.seed", checkSeed)
    System.setProperty("check.size", checkSize)
    System.setProperty("check.count", checkCount)
}

test {
    useTestNG {}

    systemProperties System.getProperties()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

test.dependsOn(checkSettings)

tasks.withType(ShadowJar) {
    manifest {
        attributes 'Implementation-Title': 'Hail',
                'Implementation-Version': '0.0.1-SNAPSHOT',
                'Main-Class': 'org.broadinstitute.hail.driver.Main'
    }
    baseName = project.name + '-all'
    mergeServiceFiles()
    zip64 true
    // conflict with version in default Hadoop/Spark install
    relocate 'org.apache.commons.math3', 'org.broadinstitute.hail.relocated.org.apache.commons.math3'
    relocate 'org.apache.http', 'org.broadinstitute.hail.relocated.org.apache.http'
    relocate 'com.google.common', 'org.broadinstitute.hail.relocated.com.google.common'
}

shadowJar {
    classifier = 'spark'
    from(project.sourceSets.main.output)
    configurations = [project.configurations.runtime]
    dependencies {
        include(dependency('net.jpountz.lz4:lz4:.*'))
        include(dependency('org.apache.commons:commons-math3:.*'))
        include(dependency('org.scalanlp:breeze-natives_' + scalaMajorVersion + ':.*'))
        include(dependency('args4j:args4j:.*'))
        include(dependency('com.github.samtools:htsjdk:.*'))

        include(dependency('org.json4s:json4s-core_2.10:.*'))
        // include(dependency('org.json4s:json4s-native_2.10:.*'))
        include(dependency('org.json4s:json4s-jackson_2.10:.*'))
        include(dependency('org.json4s:json4s-ast_2.10:.*'))

        // solr dependencies
        include(dependency('org.apache.solr:solr-solrj:.*'))
        include(dependency('org.apache.httpcomponents:httpclient:.*'))
        include(dependency('org.apache.httpcomponents:httpcore:.*'))
        include(dependency('org.apache.httpcomponents:httpmime:.*'))
        include(dependency('org.apache.zookeeper:zookeeper:.*'))
        include(dependency('org.codehaus.woodstox:stax2-api:.*'))
        include(dependency('org.codehaus.woodstox:woodstox-core-asl:.*'))
        include(dependency('org.noggit:noggit:.*'))

        include(dependency('com.datastax.cassandra:cassandra-driver-core:.*'))
	include(dependency('com.google.guava:guava:.*'))
        include(dependency('org.kududb:kudu-client:.*'))
        include(dependency('org.kududb:kudu-spark_2.10:.*'))
    }
}

task shadowTestJar(type: ShadowJar) {
    classifier = 'spark-test'
    from(project.sourceSets.main.output, project.sourceSets.test.output)
    configurations = [project.configurations.testRuntime]
    dependencies {
        include(dependency('net.jpountz.lz4:lz4:.*'))
        include(dependency('org.apache.commons:commons-math3:.*'))
        include(dependency('org.scalanlp:breeze-natives_' + scalaMajorVersion + ':.*'))
        include(dependency('args4j:args4j:.*'))
        include(dependency('com.github.samtools:htsjdk:.*'))

        include(dependency('org.json4s:json4s-core_2.10:.*'))
        // include(dependency('org.json4s:json4s-native_2.10:.*'))
        include(dependency('org.json4s:json4s-jackson_2.10:.*'))
        include(dependency('org.json4s:json4s-ast_2.10:.*'))

        include(dependency('org.testng:testng:.*'))
        include(dependency('com.beust:jcommander:.*'))
        include(dependency('org.scalatest:scalatest_' + scalaMajorVersion + ':.*'))

        // solr dependencies
        include(dependency('org.apache.solr:solr-solrj:.*'))
        include(dependency('org.apache.httpcomponents:httpclient:.*'))
        include(dependency('org.apache.httpcomponents:httpcore:.*'))
        include(dependency('org.apache.httpcomponents:httpmime:.*'))
        include(dependency('org.apache.zookeeper:zookeeper:.*'))
        include(dependency('org.codehaus.woodstox:stax2-api:.*'))
        include(dependency('org.codehaus.woodstox:woodstox-core-asl:.*'))
        include(dependency('org.noggit:noggit:.*'))

        include(dependency('com.datastax.cassandra:cassandra-driver-core:.*'))
        include(dependency('org.kududb:kudu-client:.*'))
        include(dependency('org.kududb:kudu-spark_2.10:.*'))

        include(dependency('org.testng:testng:.*'))
        include(dependency('com.beust:jcommander:.*'))
        include(dependency('org.scalatest:scalatest_' + scalaMajorVersion + ':.*'))
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

task coverage(dependsOn: jacocoTestReport)

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

task setupDocs(type: Exec) {
    commandLine 'mkdir', '-p', 'build/docs/js/', 'build/docs/html/', 'build/docs/resources/', 'build/docs/css/'
}

task runPandoc(type: Exec, dependsOn: setupDocs) {
    args('docs', 'build/docs/html/')
    executable 'src/test/resources/runPandoc.sh'
}

task runCommandsJson(type: JavaExec, dependsOn: ['setupDocs', 'classes']) {
    main 'org.broadinstitute.hail.driver.Main'
    args ('commandmeta', '-o', 'build/docs/resources/commandOptions.json')
    classpath sourceSets.main.runtimeClasspath
}

task copyHtml(type: Copy) {
    from 'docs/index.html'
    into 'build/docs'
}

task copyCss(type: Copy) {
    from 'docs/style.css'
    into 'build/docs/css'
}

task copyJavascript(type: Copy) {
    from 'docs/buildDocs.js'
    into 'build/docs/js'
}

task createDocs(dependsOn: ['setupDocs','runPandoc', 'runCommandsJson', 'copyHtml', 'copyCss', 'copyJavascript']) {

}
